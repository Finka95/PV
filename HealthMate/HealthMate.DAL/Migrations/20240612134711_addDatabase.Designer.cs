// <auto-generated />
using System;
using HealthMate.DAL.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthMate.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240612134711_addDatabase")]
    partial class addDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthMate.DAL.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityType")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivityTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("CaloriesBurned")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivitiesDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.ActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypesDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.FoodItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("double precision");

                    b.Property<double>("Fat")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("NutritionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("NutritionId");

                    b.ToTable("FoodItemsDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Health", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BloodSugar")
                        .HasColumnType("double precision");

                    b.Property<double>("Cholesterol")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiastolicBloodPressure")
                        .HasColumnType("integer");

                    b.Property<int>("HeartRate")
                        .HasColumnType("integer");

                    b.Property<int>("SystolicBloodPressure")
                        .HasColumnType("integer");

                    b.Property<Guid>("User")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HealthsDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Medication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MedicationsDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Mood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MoodStatus")
                        .HasColumnType("int");

                    b.Property<int>("StressLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MoodsDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FoodItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HealthId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MedicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NutritionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("HealthId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("MoodId");

                    b.HasIndex("NutritionId");

                    b.ToTable("NotesDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Nutrition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NutritionDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("UsersDbSet");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Activity", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.ActivityType", null)
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("HealthMate.DAL.Models.User", "User")
                        .WithMany("ActivityCollection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.FoodItem", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.Nutrition", null)
                        .WithMany("FoodItems")
                        .HasForeignKey("NutritionId");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Health", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.User", null)
                        .WithMany("HealthCollection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Medication", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.User", "User")
                        .WithMany("MedicationsCollection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Mood", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.User", "User")
                        .WithMany("MoodsCollection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Note", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.Activity", null)
                        .WithMany("Notes")
                        .HasForeignKey("ActivityId");

                    b.HasOne("HealthMate.DAL.Models.FoodItem", null)
                        .WithMany("Notes")
                        .HasForeignKey("FoodItemId");

                    b.HasOne("HealthMate.DAL.Models.Health", null)
                        .WithMany("Notes")
                        .HasForeignKey("HealthId");

                    b.HasOne("HealthMate.DAL.Models.Medication", null)
                        .WithMany("Notes")
                        .HasForeignKey("MedicationId");

                    b.HasOne("HealthMate.DAL.Models.Mood", null)
                        .WithMany("Notes")
                        .HasForeignKey("MoodId");

                    b.HasOne("HealthMate.DAL.Models.Nutrition", null)
                        .WithMany("Notes")
                        .HasForeignKey("NutritionId");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Nutrition", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.User", "User")
                        .WithMany("NutritionCollection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.User", b =>
                {
                    b.HasOne("HealthMate.DAL.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Activity", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.FoodItem", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Health", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Medication", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Mood", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.Nutrition", b =>
                {
                    b.Navigation("FoodItems");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("HealthMate.DAL.Models.User", b =>
                {
                    b.Navigation("ActivityCollection");

                    b.Navigation("HealthCollection");

                    b.Navigation("MedicationsCollection");

                    b.Navigation("MoodsCollection");

                    b.Navigation("NutritionCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
